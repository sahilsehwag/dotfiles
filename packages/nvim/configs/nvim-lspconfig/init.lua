-- MAPPINGS
	F.vim.nmap('<Leader>l.s', '<cmd>LspStart<cr>')
	F.vim.nmap('<Leader>l.r', '<cmd>LspRestart<cr>')
	F.vim.nmap('<Leader>l.k', '<cmd>LspStop<space>')
	F.vim.nmap('<Leader>l.i', '<cmd>LspInfo<cr>')
-- SERVERS
	local SERVERS = {
		--'efm',
		--'diagnosticls',
		--'codeqlls',

		'vimls',
		'lua_ls',
		--'pyright',
		--'jedi_language_server',
		--'pyls',
		--'pyls_ms',

		'html',
		'cssls',
		--'cssmodules_ls',
		--'eslint',
		--'eslintls',
		'ts_ls',
		--'denols',
		--'flow',
		--'rome',
		--'vuels',
		--'svelte',
		--'angularls',

		--'hls',
		--'fsautocomplete',
		--'fsharp_language_server',
		--'elmls',
		--'nimls',
		--'clojure_lsp',
		--'purescriptls',
		--'ocamlls',
		--'ocamllsp',
		--'elixirls',
		--'erlangls',
		--'groovyls',

		--'ccls',
		--'clangd',
		--'gopls',
		--'rust_analyzer',
		--'rls',
		--'sourcekit',

		--'solargraph',
		--'sorbet',
		--'perlls',

		--'jdtls',
		--'metals',
		--'omnisharp',
		--'csharp_ls',
		--'kotlin_language_server',

		--'r_language_server',

		'sqlls',
		'graphql',
		'bashls',
		--'rnix',
		'jsonls',
		'yamlls',
		--'cmake',
		'dockerls',
		--'terraformls',
		--'texlab',
		--'dhall_lsp_server',

		-- 'dartls',
		--'haxe_language_server',
		--'julials',
		--'scry',

		--'als',
		--'anakin_language_server',
		--'angularls',
		--'ansiblels',
		--'antlersls',
		--'apex_ls',
		--'arduino_language_server',
		--'asm_lsp',
		--'awk_ls',
		--'beancount',
		--'bicep',
		--'blueprint_ls',
		--'bright_script',
		--'bsl_ls',
		--'bufls',
		--'cadence',
		--'clarity_lsp',
		--'coffeesense',
		--'crystalline',
		--'csharp_ls',
		--'cucumber_language_server',
		--'dafny',
		--'dagger',
		--'docker_compose_language_service',
		--'dolmenls',
		--'dotls',
		--'drools_lsp',
		--'ds_pinyin_lsp',
		--'ember',
		--'emmet_ls',
		--'erg_language_server',
		--'esbonio',
		--'fennel_language_server',
		--'fennel_ls',
		--'flux_lsp',
		--'foam_ls',
		--'fortls',
		--'fstar',
		--'futhark_lsp',
		--'gdscript',
		--'ghcide',
		--'ghdl_ls',
		--'gleam',
		--'glint',
		--'glslls',
		--'golangci_lint_ls',
		--'gradle_ls',
		--'grammarly',
		--'hdl_checker',
		--'hhvm',
		--'hie',
		--'hoon_ls',
		--'idris2_lsp',
		--'intelephense',
		--'java_language_server',
		--'jqls',
		--'jsonnet_ls',
		--'lean3ls',
		--'leanls',
		--'lelwel_ls',
		'lemminx',
		--'ltex',
		--'lua_ls',
		--'luau_lsp',
		--'m68k',
		--'marksman',
		--'millet',
		--'mint',
		--'mlir_lsp_server',
		--'mlir_pdll_lsp_server',
		--'mm0_ls',
		--'move_analyzer',
		--'neocmake',
		--'nickel_ls',
		--'nil_ls',
		--'nomad_lsp',
		--'ntt',
		--'nxls',
		--'ols',
		--'opencl_ls',
		--'openscad_ls',
		--'openscad_lsp',
		--'pasls',
		--'perlnavigator',
		--'perlpls',
		--'phan',
		--'phpactor',
		--'please',
		--'powershell_es',
		--'prismals',
		--'prolog_ls',
		--'prosemd_lsp',
		--'psalm',
		--'puppet',
		--'pyls',
		--'pyls_ms',
		--'pylsp',
		--'pyre',
		--'qml_lsp',
		--'qmlls',
		--'quick_lint_js',
		--'racket_langserver',
		--'raku_navigator',
		--'reason_ls',
		--'relay_lsp',
		--'remark_ls',
		--'rescriptls',
		--'robotframework_ls',
		--'ruby_ls',
		--'ruff_lsp',
		--'salt_ls',
		--'scheme_langserver',
		--'serve_d',
		--'sixtyfps',
		--'slint_lsp',
		--'smarty_ls',
		--'smithy_ls',
		--'solang',
		--'solc',
		--'solidity',
		--'solidity_ls',
		--'sourcery',
		--'spectral',
		--'starlark_rust',
		--'steep',
		--'stylelint_lsp',
		--'sumneko_lua',
		--'svlangserver',
		--'svls',
		--'syntax_tree',
		'tailwindcss',
		--'taplo',
		--'tblgen_lsp_server',
		--'teal_ls',
		--'terraform_lsp',
		--'tflint',
		--'theme_check',
		--'tilt_ls',
		--'turtle_ls',
		--'typeprof',
		--'unison',
		--'unocss',
		--'uvls',
		--'vala_ls',
		--'vdmj',
		--'verible',
		--'veridian',
		--'veryl_ls',
		--'visualforce_ls',
		--'vls',
		--'volar',
		--'vtsls',
		--'wgsl_analyzer',
		--'zk',
		--'zls',
	}

	for _, server in ipairs(SERVERS) do
		local path = vim.g.config.paths.configs .. '/nvim-lspconfig/servers' .. '/' .. server

		local on_attach = function(client, bufnr)
			--require('configs.lsp_signature').attach()
			require("nvim-navbuddy").attach(client, bufnr)

			if client.name ~= 'tsserver' and client.name ~= 'tailwindcss' then
				require('virtualtypes').on_attach(client, bufnr)
			end

			if client.name == 'tsserver' then
				local lsp_format_modifications = require'lsp-format-modifications'
				lsp_format_modifications.attach(client, bufnr, { format_on_save = false })
			end
		end

		if vim.fn.filereadable(path) == 1 then
			require(path)({
				on_attach = on_attach,
			})
		else
			require('lspconfig')[server].setup({
				on_attach = on_attach,
			})
		end
	end
-- MESS
	local capabilities = vim.lsp.protocol.make_client_capabilities()
	capabilities.textDocument.completion.completionItem.snippetSupport = true
	capabilities.textDocument.completion.completionItem.resolveSupport = {
		properties = {
			'documentation',
			'detail',
			'additionalTextEdits',
		}
	}
